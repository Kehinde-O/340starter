const pool = require("./")

async function ensureInventoryImagesTable() {
  console.log("Checking for inventory_images table...")
  
  try {
    // Check if table exists
    const tableCheckQuery = `
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'inventory_images'
      );
    `
    const tableExists = await pool.query(tableCheckQuery)
    
    if (tableExists.rows[0].exists) {
      console.log("inventory_images table already exists")
    } else {
      console.log("Creating inventory_images table...")
      
      // Create the inventory_images table
      const createTableSQL = `
        CREATE TABLE IF NOT EXISTS public.inventory_images (
          image_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
          inventory_id INTEGER NOT NULL,
          image_path VARCHAR NOT NULL,
          thumbnail_path VARCHAR NOT NULL,
          primary_image BOOLEAN DEFAULT FALSE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT inventory_images_pkey PRIMARY KEY (image_id),
          CONSTRAINT fk_inventory FOREIGN KEY (inventory_id)
            REFERENCES public.inventory (inv_id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
        );
      `
      
      await pool.query(createTableSQL)
      console.log("inventory_images table created successfully")
    }
    
    return true
  } catch (error) {
    console.error("Error ensuring inventory_images table:", error)
    return false
  }
}

async function ensureReviewsTable() {
  console.log("Checking for reviews table...")
  
  try {
    // Check if table exists
    const tableCheckQuery = `
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'reviews'
      );
    `
    const tableExists = await pool.query(tableCheckQuery)
    
    if (tableExists.rows[0].exists) {
      console.log("reviews table already exists")
    } else {
      console.log("Creating reviews table...")
      
      // Create the reviews table
      const createTableSQL = `
        CREATE TABLE IF NOT EXISTS public.reviews (
          review_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
          inventory_id INTEGER NOT NULL,
          account_id INTEGER NOT NULL,
          rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
          review_text TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT reviews_pkey PRIMARY KEY (review_id),
          CONSTRAINT fk_inventory FOREIGN KEY (inventory_id)
            REFERENCES public.inventory (inv_id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE,
          CONSTRAINT fk_account FOREIGN KEY (account_id)
            REFERENCES public.account (account_id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
        );
      `
      
      await pool.query(createTableSQL)
      console.log("reviews table created successfully")
    }
    
    return true
  } catch (error) {
    console.error("Error ensuring reviews table:", error)
    return false
  }
}

// Run when script is executed directly
if (require.main === module) {
  Promise.all([
    ensureInventoryImagesTable(),
    ensureReviewsTable()
  ])
    .then(() => {
      console.log("Table checks complete")
      process.exit(0)
    })
    .catch(err => {
      console.error("Error:", err)
      process.exit(1)
    })
}

module.exports = { 
  ensureInventoryImagesTable,
  ensureReviewsTable 
} 